import threading 
import time 


class LeitorEscritor:
    def __init__(self):
        self.ler = threading.Semaphore()  # INICIANDO OS SEMÁFOROS COM LEITORES
        self.escrever = threading.Semaphore() # INICIANDO OS SEMÁFOROS COM ESCRITORES
        self.leitorCount = 0  # INICIANDO LEITORES

    def leitor(self):
        while True:
            self.ler.acquire()  # ESPERAR LER SEMÁFARO
            self.leitorCount += 1  # AUMENTANDO CONTAGEM DE LEITORES
            if self.leitorCount == 1:  # LEITOR PRESENTE, NÃO ESCREVA DADOS
                self.escrever.acquire()  # ESPERANDO PARA ESCREVER
            self.ler.release()  # SINAL DE LEITURA DO SEMÁFORO
            print(f"O Leitor {self.leitorCount} está lendo")
            self.ler.acquire()  # ESPERANDO PARA LER
            self.leitorCount -= 1  # LEITURA FEITA, DIMINUIR LEITORES
            if self.leitorCount == 0:  # SEM LEITOR, ESCREVA DADOS
                self.escrever.release()  # SINAL DE GRAVAÇÃO, ESCRITOR ESCREVA
            self.ler.release()  # SINAL DE LEITURA
            time.sleep(2) #AGUARDE 3 SEGUNDOS

    def escritor(self):
        while True:
            self.escrever.acquire()  # ESPERE PARA ESCREVER
            print("ESCREVENDO DADOS..")  # ESCREVA OS DADOS
            print("-" * 20)
            self.escrever.release()  # SINAL DE GRAVAÇÃO
            time.sleep(2) #AGUARDE 3 SEGUNDOS

    def main(self):
        # CHAMANDO N LEITORES E N ESCRITORES, (3 DE CADA)
        t1 = threading.Thread(target=self.leitor)
        t1.start()

        t2 = threading.Thread(target=self.escritor)
        t2.start()

        t3 = threading.Thread(target=self.leitor)
        t3.start()

        t4 = threading.Thread(target=self.escritor)
        t4.start()

        t5 = threading.Thread(target=self.leitor)
        t5.start()

        t6 = threading.Thread(target=self.escritor)
        t6.start()
      

#EXECUTANDO SE NOME FOR = MAIN 
if __name__ == "__main__":
    c = LeitorEscritor() #NOME DA CLASSE
    c.main()
